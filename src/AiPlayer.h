/*
 * AiPlayer.h
 *
 *  Created on: 4. 3. 2016
 *      Author: Martin Tuma
 *
 * AiPlayer class definition.
 * The AiPlayer class is responsible for generating the moves for the computer player for the Tic-Tac-Toe game.
 * The AiPlayer class is a child class of the Player class.
 * The AiPlayer class changes the implementation of the performMove() method inherited from the Player class.
 */

#ifndef AIPLAYER_H_
#define AIPLAYER_H_

#include "Player.h"
#include "Board.h"

#include <vector>
#include <ctime>

struct AiMove {											// Create a struct to store/return the AiMoves
	AiMove(int scr) : row(0), col(0),score(scr){};				// constructor with score
	AiMove(int row, int col) : row(row), col(col), score(0){};	// constructor with coordinates, w/o score
	int row;
	int col;
	int score;
};

class AiPlayer: public Player {
public:
	static const int kLookAhead = 10;		//Look Ahead constant used in miniMaxAB()
	/*
	 * This setting influences the "intelligence" of the Ai (the higher the lookahead the higher the
	 * quality of moves).
	 * The lookahead limit influences the processing time of the Ai move, for large boards the look ahead
	 * needs to be set to a lower number for the game to be sufficiently responsive.
	 * For a 3x3 board 6 is a good opponent, 10 a perfect opponent.
	 */

	AiPlayer(const char mark);				//Constructor, taking the mark of the player as input
	virtual ~AiPlayer();					//Destructor

	void performMove(Board& board, TUI& ui);//Places the best possible move generated by the miniMax method
											//on the board. Overrides Player::performMove()
private:
	//minimax algorithm with alpha beta pruning - used to generate, score and select the best possible move for the Ai
	AiMove miniMaxAB(Board& board, const int turn, const int look_ahead, const int alpha, const int beta, const char mark);

	int	scoreMove(Board& board, const int turn) const;		//used to score moves for the miniMaxAB method
	std::vector<AiMove> generateMoves(Board& board) const;	//used to generate all possible moves for a turn called by the miniMaxAB method
	char getOppMark() const;								//used to get the mark of the opponent called by the miniMaxAB method
};

#endif /* AIPLAYER_H_ */
